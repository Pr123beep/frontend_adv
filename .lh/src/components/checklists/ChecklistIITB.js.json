{
    "sourceFile": "src/components/checklists/ChecklistIITB.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743054049923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743054343203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n     setErrorMessage(null);\r\n \r\n     if (isChecked) {\r\n       try {\r\n-        // Using process.env.PUBLIC_URL so that the file in the public folder is correctly referenced.\r\n         const response = await fetch(`${process.env.PUBLIC_URL}/copyData.xlsx`);\r\n         if (!response.ok) {\r\n           throw new Error(`HTTP error! Status: ${response.status}`);\r\n         }\r\n@@ -34,9 +33,9 @@\n     }\r\n   };\r\n \r\n   return (\r\n-    <Box sx={{ my: 4, p: 2, border: '1px solid #ddd', borderRadius: '8px', backgroundColor: '#fafafa' }}>\r\n+    <Box sx={{ my: 4, p: 2, border: '1px solid #ccc', borderRadius: '12px', backgroundColor: '#f9f9f9' }}>\r\n       <FormControlLabel\r\n         control={<Checkbox checked={checked} onChange={handleCheckboxChange} color=\"primary\" />}\r\n         label=\"Fetch and Display IITB Data\"\r\n       />\r\n@@ -45,9 +44,9 @@\n           {errorMessage}\r\n         </Typography>\r\n       )}\r\n       {checked && rowData.map((row, index) => (\r\n-        <Card key={index} sx={{ my: 2, boxShadow: 3 }}>\r\n+        <Card key={index} sx={{ my: 2, boxShadow: 3, transition: 'transform 0.3s', '&:hover': { transform: 'translateY(-3px)' } }}>\r\n           <CardContent>\r\n             <Typography variant=\"h6\">\r\n               {row.firstName} {row.lastName}\r\n             </Typography>\r\n"
                }
            ],
            "date": 1743054049923,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport { Box, Checkbox, FormControlLabel, Typography, Card, CardContent, Link as MuiLink } from '@mui/material';\r\n\r\nfunction ChecklistIITB() {\r\n  const [checked, setChecked] = useState(false);\r\n  const [rowData, setRowData] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const handleCheckboxChange = async (e) => {\r\n    const isChecked = e.target.checked;\r\n    setChecked(isChecked);\r\n    setErrorMessage(null);\r\n\r\n    if (isChecked) {\r\n      try {\r\n        // Using process.env.PUBLIC_URL so that the file in the public folder is correctly referenced.\r\n        const response = await fetch(`${process.env.PUBLIC_URL}/copyData.xlsx`);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        const workbook = XLSX.read(arrayBuffer, { type: 'array' });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n        setRowData(jsonData);\r\n      } catch (error) {\r\n        console.error('Error reading Excel file:', error);\r\n        setErrorMessage(`Error reading Excel file: ${error.message}`);\r\n      }\r\n    } else {\r\n      setRowData([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ my: 4, p: 2, border: '1px solid #ddd', borderRadius: '8px', backgroundColor: '#fafafa' }}>\r\n      <FormControlLabel\r\n        control={<Checkbox checked={checked} onChange={handleCheckboxChange} color=\"primary\" />}\r\n        label=\"Fetch and Display IITB Data\"\r\n      />\r\n      {errorMessage && (\r\n        <Typography variant=\"body2\" color=\"error\" sx={{ mt: 1 }}>\r\n          {errorMessage}\r\n        </Typography>\r\n      )}\r\n      {checked && rowData.map((row, index) => (\r\n        <Card key={index} sx={{ my: 2, boxShadow: 3 }}>\r\n          <CardContent>\r\n            <Typography variant=\"h6\">\r\n              {row.firstName} {row.lastName}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              <strong>College:</strong> {row.college}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              <strong>Company:</strong> {row.companyName} {row.companyIndustry && `(${row.companyIndustry})`}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              <strong>LinkedIn Profile:</strong>{' '}\r\n              {row.linkedinProfileUrl ? (\r\n                <MuiLink href={row.linkedinProfileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {row.linkedinProfileUrl}\r\n                </MuiLink>\r\n              ) : 'N/A'}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              <strong>LinkedIn Company:</strong>{' '}\r\n              {row.linkedinCompanyUrl ? (\r\n                <MuiLink href={row.linkedinCompanyUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {row.linkedinCompanyUrl}\r\n                </MuiLink>\r\n              ) : 'N/A'}\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap', mt: 1 }}>\r\n              <strong>Description:</strong> {row.linkedinDescription || 'N/A'}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ChecklistIITB;\r\n"
        }
    ]
}